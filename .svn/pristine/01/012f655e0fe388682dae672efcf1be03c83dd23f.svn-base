package com.t05g1.controller;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.t05g1.pojo.Admins;
import com.t05g1.pojo.Brand;
import com.t05g1.pojo.Category;
import com.t05g1.pojo.Colour;
import com.t05g1.pojo.Commodity;
import com.t05g1.pojo.Commtypepricr;
import com.t05g1.pojo.Images;
import com.t05g1.pojo.Property;
import com.t05g1.pojo.PropertyValue;
import com.t05g1.service.BrandService;
import com.t05g1.service.CategoryService;
import com.t05g1.service.ColourService;
import com.t05g1.service.CommodityService;
import com.t05g1.service.CommotypepricrService;
import com.t05g1.service.ImagesService;
import com.t05g1.service.PropertyService;
import com.t05g1.service.PropertyValueService;

@Controller
@RequestMapping("/adminCommodity")
public class Admin_CommodityMG_Controller {

	@Autowired
	private CommodityService commodityService;

	@Autowired
	private CategoryService categoryService;

	@Autowired
	private BrandService brandService;

	@Autowired
	private ColourService colourService;

	@Autowired
	private CommotypepricrService commotypepricrService;

	@Autowired
	private PropertyService propertyService;

	@Autowired
	private PropertyValueService propertyValueService;

	@Autowired
	private ImagesService imagesService;

	/** 上传地址 */
	@Value("${file.upload.path}")
	private String filePath;

	/****
	 * 商品
	 * 列表--------------------------------------------------------------------------------
	 */

	// 商品列表
	@RequestMapping("productlist.do")
	public ModelAndView productlist(ModelAndView mv) {
		// 获取商品类型
		List<Category> catList = categoryService.selectByExample();
		// 获取品牌类型
		List<Brand> braList = brandService.selectByExample();

		mv.addObject("catList", catList);
		mv.addObject("braList", braList);

		mv.setViewName("admin/product-list.html");

		return mv;
	}

	// 商品列表带分页
	@ResponseBody
	@RequestMapping("showData.do")
	public Map<String, Object> methodx(@RequestParam(value = "page", required = false, defaultValue = "1") int curr,
			@RequestParam(value = "limit", required = false, defaultValue = "10") int limit,
			@RequestParam(value = "c_name", required = false) String c_name,
			@RequestParam(value = "c_categoryId", required = false, defaultValue = "0") int c_categoryId,
			@RequestParam(value = "c_brandId", required = false, defaultValue = "0") int c_brandId) {
		System.out.println(c_categoryId);
		System.out.println(curr);
		System.out.println(limit);
		List<Commodity> datas = commodityService.queryAllDataFromTable(curr, limit, c_name, c_categoryId, c_brandId);
		int countx = commodityService.queryAllCount(c_name, c_categoryId);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("code", 0);
		map.put("msg", "");
		map.put("count", countx);
		map.put("data", datas);
		System.out.println(map.toString());
		return map;
	}

	// 添加商品页面
	@RequestMapping("productadd.do")
	public ModelAndView productadd(ModelAndView mv) {
		// 获取商品类型
		List<Category> catList = categoryService.selectByExample();
		// 获取商品列表
		List<Brand> braList = brandService.selectByExample();
		// 获取颜色
		List<Colour> colList = colourService.selectByExample();
		// 获取版本
		List<Commtypepricr> comList = commotypepricrService.selectByExample();

		mv.addObject("braList", braList);
		mv.addObject("catList", catList);
		mv.addObject("colList", colList);
		mv.addObject("comList", comList);

		// mv.setViewName("admin/TestPage.html");
		mv.setViewName("admin/product-add.html");

		return mv;
	}

	// 查看商品页面
	@RequestMapping("productdetail.do")
	public ModelAndView productDetail(ModelAndView mv) {

		mv.setViewName("admin/product-detail.html");

		return mv;
	}

	// 修改商品页面
	@RequestMapping("productupdate.do")
	public ModelAndView productUpdate(ModelAndView mv) {

		// 获取商品类型
		List<Category> catList = categoryService.selectByExample();
		// 获取商品列表
		List<Brand> braList = brandService.selectByExample();
		// 获取颜色
		List<Colour> colList = colourService.selectByExample();
		// 获取版本
		List<Commtypepricr> comList = commotypepricrService.selectByExample();

		mv.addObject("braList", braList);
		mv.addObject("catList", catList);
		mv.addObject("colList", colList);
		mv.addObject("comList", comList);

		mv.setViewName("admin/product-update.html");

		return mv;
	}

	// 商品图片上传
	@RequestMapping(value = "updateProductImg.do")
	public @ResponseBody String updatePersonal(@RequestParam("file") MultipartFile file, HttpServletRequest request)
			throws IllegalStateException, IOException {
		// 获取上传文件名
		String oldName = file.getOriginalFilename();
		// 定义上传文件路径
		String path = filePath + "productPhoto/";
		// 改名卡已取消
		String fileName = oldName;
		
		// 文件相对路径
		String rappendix = "/img/upload/productPhoto/" + fileName;
		// 文件绝对路径
		fileName = path + File.separator + fileName;
		System.out.println(fileName);
		// 新建文件
		File file1 = new File(fileName);
		if (!file1.exists()) {
			// 先得到文件的上级目录，并创建上级目录，在创建文件
			file1.getParentFile().mkdir();
			try {
				// 创建文件
				file1.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// 写入文件
		file.transferTo(file1);

		String str = "{\"code\": 0,\"msg\": \"\",\"data\": {\"src\":\"" + rappendix + "\"}}";
		System.out.println(str);
		System.out.println(file1);
		return str;

	}

	// 改名卡
	public static String changeName(String oldName) {

		Random r = new Random();

		Date d = new Date();

		String newName = oldName.substring(oldName.indexOf('.'));

		newName = r.nextInt(99999999) + d.getTime() + newName;
		System.out.println(newName);
		return newName;

	}

	// 添加商品
	@ResponseBody
	@RequestMapping(value = "addproduct.do")
	public Map<String, Object> addProduct(@ModelAttribute Commodity commodity) {

		Map<String, Object> map = new HashMap<>();

		int res = commodityService.addProduct(commodity);

		map.put("res", res);

		return map;

	}

	// 修改商品
	@ResponseBody
	@RequestMapping(value = "updateproduct.do")
	public Map<String, Object> updateProduct(@ModelAttribute Commodity commodity) {

		Map<String, Object> map = new HashMap<>();

		int res = commodityService.updateProduct(commodity);

		map.put("res", res);

		return map;

	}

	// 删除商品
	@ResponseBody
	@RequestMapping(value = "delProductById.do")
	public Map<String, Object> delProductById(Integer c_id) {

		Map<String, Object> map = new HashMap<>();

		int res = commodityService.deleteProductById(c_id);

		map.put("res", res);
		System.out.println(res);
		return map;

	}

	// 批量删除商品
	@ResponseBody
	@RequestMapping(value = "delProductsById.do")
	public Map<String, Object> deleteByIds(String c_id) {

		Map<String, Object> map = new HashMap<>();
		String[] a = c_id.split(",");
		// System.out.println(c_id);
		try {

			for (int i = 0; i < a.length; i++) {
				commodityService.deleteProductsById(a[i]);
				map.put("code", 1);
			}
		} catch (Exception e) {
			e.printStackTrace();
			map.put("code", -1);
		}

		return map;

	}

	// 改变商品状态
	@ResponseBody
	@RequestMapping(value = "isStateStart.do")
	public Map<String, Object> isState(Integer c_id, String c_state) {

		Map<String, Object> map = new HashMap<>();

		System.out.println(c_id + c_state);

		int res = commodityService.isState(c_id, c_state);

		map.put("res", res);

		return map;

	}

	// 属性设置
	@RequestMapping("propertyValue_edit.do")
	public String edit(Model model, int c_id) {
		System.out.println(c_id);
		Commodity com = commodityService.selectProductDetail(c_id);
		System.out.println(com.toString());
		propertyValueService.init(com);
		List<PropertyValue> pvs = propertyValueService.list(com.getC_id());

		model.addAttribute("com", com);
		model.addAttribute("pvs", pvs);
		return "admin/TextPropertyValue.html";
	}

	// 没有属性就添加
	@ResponseBody
	@RequestMapping("propertyValue_update.do")
	public String update(PropertyValue pv) {
		propertyValueService.update(pv);
		return "success";
	}

	// 图片管理页面
	@RequestMapping(value = "imagesMG.do")
	public ModelAndView imagemg(ModelAndView mv) {

		// mv.addObject("cid",cid);
		mv.setViewName("admin/product-Image.html");

		return mv;

	}

	// 图片管理带分页
	@ResponseBody
	@RequestMapping("showImagesData.do")
	public Map<String, Object> showImages(@RequestParam(value = "page", required = false, defaultValue = "1") int curr,
			@RequestParam(value = "limit", required = false, defaultValue = "10") int limit,
			@RequestParam(value = "commId", required = false, defaultValue = "0") int commId) {
		System.out.println(commId);
		List<Images> datas = imagesService.selectById(curr, limit, commId);
		int count = imagesService.queryAllCount(commId);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("code", 0);
		map.put("msg", "");
		map.put("count", count);
		map.put("data", datas);
		System.out.println(map.toString());
		return map;
	}

	// 添加图片页面
	@RequestMapping(value = "images.do")
	public ModelAndView addimagemg(ModelAndView mv, int commId) {

		// mv.addObject("cid",cid);
		// 测试

		List<Colour> colList = colourService.selectByExample();

		mv.addObject("commId", commId);
		mv.addObject("colList", colList);
		mv.setViewName("admin/Test-imageadd.html");

		return mv;

	}

	// 测试多图上传
	@ResponseBody
	@RequestMapping(value = "saveGoods.do", method = RequestMethod.POST)
	private Map<String, Object> saveImgInfo(int colourId, int commId, String imgUrls) {
		System.out.println(colourId);
		System.out.println(commId);
		System.out.println(imgUrls);
		String[] urls = imgUrls.split(",");

		Map<String, Object> map = new HashMap<>();

		int res = imagesService.insertByAll(colourId, commId, urls[0], urls[1], urls[2]);
		System.out.println("图片名称：" + urls[0]);
		System.out.println("图片名称：" + urls[1]);
		System.out.println("图片名称：" + urls[2]);
		map.put("res", res);
		return map;
	}

	//文件路劲
	public static final String FILEPATH ="D:/SpringBoot/JDHD3.0/src/main/resources/static";
	// 删除图片文件，只是删除文件，不删除数据库信息
	@RequestMapping("deleteProductFile.do")
	@ResponseBody
	public String delFile(String paths) {
		// 上篇中前端穿过来的是/imctemp-rainy/*.jpg格式的，只需要取出最后的文件名，写死路径，就可以准确找到文件了
		// 前端页面处理路径，
		String[] imgpath = paths.split(",");
		 String resultInfo = null;
		for (int i = 0; i < imgpath.length; i++) {
			
			  //int lastIndexOf = path.lastIndexOf("/");
			  String img_path =imgpath[i];//.substring(lastIndexOf + 1, path.length());
			  System.out.println(img_path); 
			  img_path =FILEPATH + img_path;
			  System.out.println(img_path);//输出测试一下文件路径是否正确 
			  File file = new File(img_path);			  
			  if (file.exists()) {//文件是否存在 
				if (file.delete()) {//存在就删了，返回1
				   resultInfo = "1";
				   } else {
					   resultInfo = "0";
					   } 
			  } else {
				resultInfo ="1";
				  }
		}
		 
		  return resultInfo;		 
	}

	// 删除数据库图片信息
	@ResponseBody
	@RequestMapping(value = "delImageById.do")
	public Map<String, Object> delImageById(int id) {

		Map<String, Object> map = new HashMap<>();

		int res = imagesService.deleteByPrimaryKey(id);

		map.put("res", res);

		return map;
	}
   //编辑商品页面
	@RequestMapping(value = "imagesupdate.do")
	public ModelAndView imageupdate(ModelAndView mv) {

			// mv.addObject("cid",cid);
		mv.setViewName("admin/image-update.html");

		return mv;

		}
	/***
	 * 商品类型管理----------------------------------------------------------------------
	 */
	// 商品类型列表
	@ResponseBody
	@RequestMapping("showCategoryData.do")
	public Map<String, Object> showCategory(
			@RequestParam(value = "page", required = false, defaultValue = "1") int curr,
			@RequestParam(value = "limit", required = false, defaultValue = "10") int limit,
			@RequestParam(value = "name", required = false) String name) {
		System.out.println(curr);
		System.out.println(limit);
		List<Category> datas = categoryService.queryAllDataFromTable(curr, limit, name);
		int countx = categoryService.queryAllCount(name);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("code", 0);
		map.put("msg", "");
		map.put("count", countx);
		map.put("data", datas);
		System.out.println(map.toString());
		return map;
	}

	// 添加商品类型页面
	@RequestMapping("categorytadd.do")
	public ModelAndView categoryadd(ModelAndView mv) {

		mv.setViewName("admin/product-addtype.html");

		return mv;
	}

	// 添加商品类型
	@ResponseBody
	@RequestMapping(value = "addcategory.do")
	public Map<String, Object> addCategory(@ModelAttribute Category category) {

		Map<String, Object> map = new HashMap<>();

		int res = categoryService.insert(category);

		map.put("res", res);

		return map;
	}

	// 删除商品
	@ResponseBody
	@RequestMapping(value = "delCategoryById.do")
	public Map<String, Object> delCategoryById(Integer id) {

		Map<String, Object> map = new HashMap<>();

		int res = categoryService.deleteByPrimaryKey(id);

		map.put("res", res);

		return map;

	}

	// 修改商品类型页面
	@RequestMapping("productupdateCategory.do")
	public ModelAndView productUpdateCategory(ModelAndView mv) {

		mv.setViewName("admin/product-updateCategory.html");

		return mv;
	}

	// 修改商品
	@ResponseBody
	@RequestMapping(value = "updateCategory.do")
	public Map<String, Object> updateCategory(@ModelAttribute Category category) {

		Map<String, Object> map = new HashMap<>();

		int res = categoryService.updateByPrimaryKeySelective(category);

		map.put("res", res);

		return map;

	}

	/***
	 * 品牌管理-------------------------------------------------------------------
	 */
	// 商品类型列表
	@ResponseBody
	@RequestMapping("showBrandData.do")
	public Map<String, Object> showBrand(@RequestParam(value = "page", required = false, defaultValue = "1") int curr,
			@RequestParam(value = "limit", required = false, defaultValue = "10") int limit,
			@RequestParam(value = "b_name", required = false) String b_name) {
		System.out.println(curr);
		System.out.println(limit);
		List<Brand> datas = brandService.queryAllDataFromTable(curr, limit, b_name);
		int countx = brandService.queryAllCount(b_name);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("code", 0);
		map.put("msg", "");
		map.put("count", countx);
		map.put("data", datas);
		System.out.println(map.toString());
		return map;
	}

	// 添加品牌页面
	@RequestMapping("brandAdd.do")
	public ModelAndView brandAdd(ModelAndView mv) {

		mv.setViewName("admin/brand-add.html");

		return mv;
	}

	// 品牌图片上传
	@RequestMapping(value = "updateBrandImg.do")
	public @ResponseBody String updateBrand(@RequestParam("file") MultipartFile file, @ModelAttribute Admins ui,
			HttpServletRequest request) throws IllegalStateException, IOException {
		// 获取上传文件名
		String oldName = file.getOriginalFilename();
		// 定义上传文件路径
		String path = filePath + "brandPhoto/";
		// 改名卡
		String fileName = changeName(oldName);
		// 文件相对路径
		String rappendix = "/img/upload/brandPhoto/" + fileName;
		// 文件绝对路径
		fileName = path + File.separator + fileName;
		// 新建文件
		File file1 = new File(fileName);
		if (!file1.exists()) {
			// 先得到文件的上级目录，并创建上级目录，在创建文件
			file1.getParentFile().mkdir();
			try {
				// 创建文件
				file1.createNewFile();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		// 写入文件
		file.transferTo(file1);

		String str = "{\"code\": 0,\"msg\": \"\",\"data\": {\"src\":\"" + rappendix + "\"}}";
		System.out.println(str);
		System.out.println(file1);
		return str;

	}

	// 添加品牌
	@ResponseBody
	@RequestMapping(value = "addbrand.do")
	public Map<String, Object> addBrand(@ModelAttribute Brand brand) {

		Map<String, Object> map = new HashMap<>();

		int res = brandService.insert(brand);

		map.put("res", res);

		return map;

	}

	// 改变品牌状态
	@ResponseBody
	@RequestMapping(value = "isanditStatus.do")
	public Map<String, Object> isitStatus(@ModelAttribute Brand brand) {

		Map<String, Object> map = new HashMap<>();

		int res = brandService.updateByPrimaryKeySelective(brand);

		map.put("res", res);

		return map;

	}

	// 删除品牌
	@ResponseBody
	@RequestMapping(value = "delBrandById.do")
	public Map<String, Object> delBrandById(Integer b_id) {

		Map<String, Object> map = new HashMap<>();

		int res = brandService.deleteByPrimaryKey(b_id);

		map.put("res", res);

		return map;
	}

	// 修改品牌页面
	@RequestMapping(value = "brandupdate.do")
	public ModelAndView brandupdate(ModelAndView mv) {

		mv.setViewName("admin/brand-update.html");

		return mv;

	}

	// 修改品牌
	@ResponseBody
	@RequestMapping(value = "updateBrandById.do")
	public Map<String, Object> updatebrand(Brand brand) {

		Map<String, Object> map = new HashMap<>();

		int res = brandService.updateByPrimaryKey(brand);

		map.put("res", res);

		return map;

	}

	/****
	 * 属性管理---------------------------------------------------------------------------------------
	 */
	// 属性
	@RequestMapping(value = "showproperty.do")
	public ModelAndView showproperty(ModelAndView mv) {

		mv.setViewName("admin/product-property.html");
		return mv;
	}

	// 商品属性列表
	@ResponseBody
	@RequestMapping(value = "showPropertyData.do", produces = "application/json;charset=UTF-8")
	public Map<String, Object> showPropertyById(
			@RequestParam(value = "page", required = false, defaultValue = "1") int curr,
			@RequestParam(value = "limit", required = false, defaultValue = "10") int limit,
			@RequestParam(value = "cid", required = false) Integer cid) {

		List<Property> datas = propertyService.queryAllDataFromTable(curr, limit, cid);
		int countx = propertyService.queryAllCount(cid);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("code", 0);
		map.put("msg", "");
		map.put("count", countx);
		map.put("data", datas);
		return map;
	}

	// 添加属性页面
	@RequestMapping(value = "addProperty.do")
	public ModelAndView addProperty(ModelAndView mv, Integer cid) {

		mv.addObject("cid", cid);
		mv.setViewName("admin/product-addproperty.html");

		return mv;

	}

	// 添加属性
	@ResponseBody
	@RequestMapping(value = "addpropertyBycid.do")
	public Map<String, Object> addPropertyBycid(Property property) {

		Map<String, Object> map = new HashMap<>();

		int res = propertyService.insertSelective(property);

		map.put("res", res);

		return map;

	}

	// 删除属性
	@ResponseBody
	@RequestMapping(value = "delPropertyById.do")
	public Map<String, Object> delPropertyById(Integer id) {

		Map<String, Object> map = new HashMap<>();

		int res = propertyService.deleteByPrimaryKey(id);

		map.put("res", res);

		return map;

	}

	// 编辑属性
	@RequestMapping(value = "propertyupdate.do")
	public ModelAndView updateProperty(ModelAndView mv) {

		mv.setViewName("admin/product-propertyupdate.html");

		return mv;

	}

	// 编辑属性
	@ResponseBody
	@RequestMapping(value = "updatePropertyById.do")
	public Map<String, Object> updatePropertyById(Property property) {

		Map<String, Object> map = new HashMap<>();

		int res = propertyService.updateByPrimaryKeySelective(property);

		map.put("res", res);

		return map;

	}

	// 类型商品页面
	@RequestMapping("categoryProduct.do")
	public ModelAndView categoryProduct(ModelAndView mv) {

		mv.setViewName("admin/category-productlist.html");

		return mv;
	}

	// 品牌商品页面
	@RequestMapping("brandProduct.do")
	public ModelAndView brandProduct(ModelAndView mv) {

		mv.setViewName("admin/brand-productlist.html");

		return mv;
	}

}
